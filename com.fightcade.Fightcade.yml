app-id: com.fightcade.Fightcade
base: org.winehq.Wine
base-version: stable-24.08
runtime: org.freedesktop.Platform
runtime-version: '24.08'
sdk: org.freedesktop.Sdk
sdk-extensions:
  - org.freedesktop.Sdk.Extension.node20
command: fightcade
tags:
  - proprietary

# Support 32-bit at runtime
inherit-extensions:
  - org.freedesktop.Platform.Compat.i386
  - org.freedesktop.Platform.GL32
  - org.winehq.Wine.gecko
  - org.winehq.Wine.mono

add-extensions:
  com.fightcade.Fightcade.Steamos:
    directory: steamos
    bundle: true
    no-autodownload: true
    autodelete: true

finish-args:
  - --share=ipc
  - --socket=x11
  - --share=network
  - --socket=pulseaudio
  - --allow=multiarch
  # Allows emulators to inhibit screensavers
  - --talk-name=org.freedesktop.ScreenSaver
  # Allows Fightcade UI to send notifications for challenges
  - --talk-name=org.freedesktop.Notifications
  # Needed for controller support
  - --device=all
  # Support 32-bit runtime
  - --env=LD_LIBRARY_PATH=/app/lib:/app/lib32
  # Flycast env var
  - --env=FLYCAST_ROOT=/app/fightcade/Fightcade/emulator/flycast

modules:
  # For unbundling AppImage'd Flycast
  - name: unappimage
    buildsystem: simple
    build-commands:
      - make -C squashfs-tools -j ${FLATPAK_BUILDER_N_JOBS} install INSTALL_DIR=/app/bin
    sources:
      - type: git
        url: https://github.com/refi64/unappimage
        commit: d7f86f2a0d7ec3a69211125207d5f127386b849a

  - name: fightcade
    buildsystem: simple
    build-commands:
      - mkdir -p /app/fightcade/Fightcade
      - mkdir -p /app/fightcade/Resources

      # A lot of things need to be symlinked to writable files. Fightcade
      # expects to be able to write to files in its subdirectories,
      # /app/fightcade/Fightcade is r/o in Flatpak.
      #
      # To work around this we symlink a bunch of files to writable
      # versions in /var/data/

      # JSON files
      - ln -s /var/data/fbneo_roms.json emulator/fbneo_roms.json
      - ln -s /var/data/snes9x_roms.json emulator/snes9x_roms.json
      - ln -s /var/data/flycast_roms.json emulator/flycast_roms.json
      - ln -s /var/data/nulldc_roms.json emulator/nulldc_roms.json
      - ln -s /var/data/fc1_roms.json emulator/fc1_roms.json
      - ln -s /var/data/fbneo_cv_roms.json emulator/fbneo_cv_roms.json
      - ln -s /var/data/fbneo_gg_roms.json emulator/fbneo_gg_roms.json
      - ln -s /var/data/fbneo_md_roms.json emulator/fbneo_md_roms.json
      - ln -s /var/data/fbneo_msx_roms.json emulator/fbneo_msx_roms.json
      - ln -s /var/data/fbneo_nes_roms.json emulator/fbneo_nes_roms.json
      - ln -s /var/data/fbneo_pce_roms.json emulator/fbneo_pce_roms.json
      - ln -s /var/data/fbneo_sg1k_roms.json emulator/fbneo_sg1k_roms.json
      - ln -s /var/data/fbneo_sms_roms.json emulator/fbneo_sms_roms.json
      - ln -s /var/data/fbneo_tg_roms.json emulator/fbneo_tg_roms.json
      # ROM storage directories
      - rmdir emulator/fbneo/ROMs
      - ln -s /var/data/ROMs/fbneo emulator/fbneo/ROMs
      - rmdir emulator/ggpofba/ROMs
      - ln -s /var/data/ROMs/ggpofba emulator/ggpofba/ROMs
      - rmdir emulator/snes9x/ROMs
      - ln -s /var/data/ROMs/snes9x emulator/snes9x/ROMs
      - rmdir emulator/flycast/ROMs
      - ln -s /var/data/ROMs/flycast emulator/flycast/ROMs
      # Log files Fightcade expects to be able to write to
      - ln -s /var/data/logs/fcade-errors.log emulator/fcade-errors.log
      - ln -s /var/data/logs/fcade.log emulator/fcade.log
      - ln -s /var/data/logs/fcade.log.1 emulator/fcade.log.1
      - ln -s /var/data/logs/fcade.log.2 emulator/fcade.log.3
      - ln -s /var/data/logs/fcade.log.3 emulator/fcade.log.2
      - ln -s /var/data/logs/update-errors.log update-errors.log
      - ln -s /var/data/logs/update.log update.log
      # FBNeo config
      - rm -rf emulator/fbneo/config
      - ln -s /var/data/config/fcadefbneo emulator/fbneo/config
      # FBNeo training mode
      - mv emulator/fbneo/fbneo-training-mode emulator/fbneo/fbneo-training-mode-original
      - ln -s /var/data/fbneo-training-mode emulator/fbneo/fbneo-training-mode
      # FBNeo save states
      - mv emulator/fbneo/savestates emulator/fbneo/savestates_orig
      - ln -s /var/data/config/fcadefbneo/savestates emulator/fbneo/savestates
      # FBNeo saved overlays
      - ln -s /var/data/config/fcadefbneo/fightcade emulator/fbneo/fightcade
      # Snes9x config
      - ln -s /var/data/config/snes9x/fcadesnes9x.conf emulator/snes9x/fcadesnes9x.conf
      - rm -r emulator/snes9x/Saves
      - ln -s /var/data/config/snes9x/Saves emulator/snes9x/Saves
      # Snes9x fixes
      - ln -s /var/data/config/snes9x/Valid.Ext emulator/snes9x/Valid.Ext
      - ln -s /var/data/config/snes9x/stdout.txt emulator/snes9x/stdout.txt
      - ln -s /var/data/config/snes9x/stderr.txt emulator/snes9x/stderr.txt
      # Flycast config
      - ln -s /var/data/config/flycast/emu.cfg emulator/flycast/emu.cfg
      - rm -rf emulator/flycast/mappings
      - ln -s /var/data/config/flycast/mappings emulator/flycast/mappings
      - ln -s /var/data/logs/flycast.log emulator/flycast/flycast.log
      # Backup the original data directory. We copy the savestates out of
      # the original directory at runtime.
      - mv emulator/flycast/data emulator/flycast/data_orig
      - ln -s /var/data/config/flycast/data emulator/flycast/data
      # Wine wrapper
      - install -Dm755 wine.sh /app/fightcade/Resources/wine.sh
      # Flycast binary
      - unappimage emulator/flycast/flycast.elf
      - rm emulator/flycast/flycast.elf
      - install -Dm755 squashfs-root/usr/bin/flycast-dojo emulator/flycast/flycast.elf
      - rm -rf squashfs-root
      # Copy to /app/fightcade/Fightcade
      - cp -R * /app/fightcade/Fightcade
    sources:
      - type: archive
        url: https://web.fightcade.com/download/Fightcade-linux-v2.1.45.tar.gz
        sha256: 9880cbfa9b6e4a4eceab750c1d825d3c753ae4b1f84b53df421829e1423c50be
        x-checker-data:
          type: html
          url: https://web.fightcade.com/download/update.json
          version-pattern: Fightcade-linux-v([\d.]+).tar.gz
          url-template: https://web.fightcade.com/download/Fightcade-linux-v${version}.tar.gz
      - type: file
        path: scripts/wine.sh

  - name: fightcade-extra
    buildsystem: simple
    build-commands:
      - install -Dm755 com.fightcade.Fightcade.desktop /app/share/applications/com.fightcade.Fightcade.desktop
      - install -Dm755 fcade-quark.desktop /app/share/applications/com.fightcade.Fightcade.fcade-quark.desktop
      - install -Dm755 fightcade-launcher.sh /app/bin/fightcade
      - install -Dm755 fcade-quark.sh /app/bin/fcade-quark
      - install -Dm755 get-wine-prefix.sh /app/bin/get-wine-prefix
      - install -Dm755 steamdeck-xdgopen.sh /app/bin/xdg-open
      - install -Dm755 steamdeck-xdgmime.sh /app/bin/xdg-mime
      - install -Dm755 com.fightcade.Fightcade-64.png /app/share/icons/hicolor/64x64/apps/com.fightcade.Fightcade.png
      - install -Dm755 com.fightcade.Fightcade-128.png /app/share/icons/hicolor/128x128/apps/com.fightcade.Fightcade.png
      - install -Dm755 com.fightcade.Fightcade-256.png /app/share/icons/hicolor/256x256/apps/com.fightcade.Fightcade.png
      - install -Dm644 metainfo.xml /app/share/metainfo/com.fightcade.Fightcade.metainfo.xml
    sources:
      - type: file
        path: com.fightcade.Fightcade.desktop
      - type: file
        path: fcade-quark.desktop
      - type: file
        path: icons/com.fightcade.Fightcade-64.png
      - type: file
        path: icons/com.fightcade.Fightcade-128.png
      - type: file
        path: icons/com.fightcade.Fightcade-256.png
      - type: file
        path: scripts/fightcade-launcher.sh
      - type: file
        path: scripts/fcade-quark.sh
      - type: file
        path: scripts/get-wine-prefix.sh
      - type: file
        path: scripts/steamdeck-xdgmime.sh
      - type: file
        path: scripts/steamdeck-xdgopen.sh
      - type: file
        path: metainfo.xml

  # Provide ip command, needed for Fightcade to determine connection type
  - name: iproute2
    buildsystem: autotools
    make-install-args:
      - PREFIX=${FLATPAK_DEST}
      - SBINDIR=${FLATPAK_DEST}/bin
      - CONFDIR=${FLATPAK_DEST}/etc/iproute2
    sources:
      - type: archive
        url: https://mirrors.edge.kernel.org/pub/linux/utils/net/iproute2/iproute2-6.2.0.tar.xz
        sha256: 4d72730200ec5b2aabaa1a2f20553c6748292f065d9a154c7d5e22559df9fd62

  # Electron wrapper, needed for Fightcade frontend
  - name: zypak
    sources:
      - type: git
        url: https://github.com/refi64/zypak
        tag: v2024.01.17
        commit: ded79a2f8a509adc21834b95a9892073d4a91fdc
        x-checker-data:
          type: git
          tag-pattern: ^v([\d.]+)$


  # Flycast native dep
  - shared-modules/lua5.3/lua-5.3.5.json

  # Flycast expects liblua to be named liblua5.3.so.0
  - name: lua
    buildsystem: simple
    build-commands:
      - ln -s /app/lib/liblua.so /app/lib/liblua5.3.so.0

  # Flycast native dep
  - name: libao
    buildsystem: autotools
    sources:
      - type: archive
        url: https://gitlab.xiph.org/xiph/libao/-/archive/1.2.2/libao-1.2.2.tar.gz
        sha256: df8a6d0e238feeccb26a783e778716fb41a801536fe7b6fce068e313c0e2bf4d
    build-options:
      cflags: -Wno-error=implicit-function-declaration

  # Flycast native dep
  - name: libcurl-gnutls
    buildsystem: simple
    build-commands:
      - ARCH_TRIPLE=$(gcc --print-multiarch) && ln -s /usr/lib/${ARCH_TRIPLE}/libcurl.so.4
        /app/lib/libcurl-gnutls.so.4

  # Flycast native dep
  - name: libzip
    buildsystem: cmake-ninja
    config-opts:
      - -DCMAKE_BUILD_TYPE=Release
      - -DCMAKE_INSTALL_LIBDIR=lib
    cleanup:
      - /include
      - /bin
      - /share
      - /lib/pkgconfig
      - /lib/*.la
    sources:
      - type: archive
        url: https://libzip.org/download/libzip-1.9.2.tar.xz
        sha256: c93e9852b7b2dc931197831438fee5295976ee0ba24f8524a8907be5c2ba5937

  # Flycast native symlink
  - name: libzip-symlink
    buildsystem: simple
    build-commands:
      - ln -s /app/lib/libzip.so.5 /app/lib/libzip.so.4

  # Flycast native dep
  - name: libminiupnpc
    buildsystem: cmake-ninja
    disable-http-decompression: true,
    config-opts:
      - -DCMAKE_BUILD_TYPE=Release
      - -DUPNPC_BUILD_SHARED=true
      - -DUPNPC_BUILD_STATIC=false
      - -DUPNPC_BUILD_TESTS=false
      - -DUPNPC_BUILD_SAMPLE=false
      - -DUPNPC_NO_INSTALL=true
    # For some reason, CMake's install asks for files that do not exist.
    # So instead we'll install only the parts we care about ourselves.
    no-make-install: true
    post-install:
      - install -m0644 -t /app/lib libminiupnpc.so.2.2.3
      - install -m0644 -t /app/lib libminiupnpc.so.17
      - install -m0644 -t /app/lib libminiupnpc.so
    sources:
      - type: archive
        url: https://miniupnp.tuxfamily.org/files/miniupnpc-2.2.3.tar.gz
        sha256: dce41b4a4f08521c53a0ab163ad2007d18b5e1aa173ea5803bd47a1be3159c24

  # libsecret from shared module
  - shared-modules/libsecret/libsecret.json

  # Min browser: Provides a lightweight web browser.
  # This is needed to reliably open external links when running under SteamOS/Steam Deck Gaming Mode,
  # where the default system browser may not be accessible or properly integrated.
  - name: min
    buildsystem: simple
    build-options:
      append-path: /usr/lib/sdk/node20/bin
      env:
        XDG_CACHE_HOME: /run/build/min/flatpak-node/cache
        npm_config_cache: /run/build/min/flatpak-node/npm-cache
        npm_config_nodedir: /usr/lib/sdk/node20
        npm_config_offline: 'true'
    build-commands:
      # Replaces the GitHub reference with a specific npm version (^3.7.3) for offline installation.
      # Fix error due to network requirement during build.
      # https://github.com/minbrowser/min/issues/735#issuecomment-1418702226
      - sed -i "s|github:minbrowser/dragula|^3.7.3|g" package.json
      # Install dependencies offline, omitting optional ones
      - npm install --offline --omit=optional
      # Build the project and create the Linux unpacked version
      - npm run build && node ./scripts/buildLinuxUnpacked.js
      # Create the directory for the Min browser app
      - mkdir -p ${FLATPAK_DEST}/steamos/min/app
      # Copy the unpacked app files to the destination directory
      - cp -a dist/app/linux*unpacked/* ${FLATPAK_DEST}/steamos/min/app
      # Replace the placeholder PREFIX with the actual destination path in the run script
      - sed -i "s|PREFIX|${FLATPAK_DEST}|g" run.sh
      # Install the run script for the Min browser
      - install -Dm755 run.sh ${FLATPAK_DEST}/steamos/min/min-browser
    post-install:
      # Install the metainfo file for the Min browser
      - >-
        install -Dm644
        -t ${FLATPAK_DEST}/steamos/min/share/metainfo/
        ${FLATPAK_ID}.Steamos.metainfo.xml
    sources:
      - type: git
        url: https://github.com/minbrowser/min
        tag: v1.35.0
      - generated-sources.json
      - type: file
        path: package-lock.json
      - type: file
        path: buildLinuxUnpacked.js
        dest: scripts
      - type: file
        path: com.fightcade.Fightcade.Steamos.metainfo.xml
      - type: script
        dest-filename: run.sh
        commands:
          - zypak-wrapper PREFIX/steamos/min/app/min --no-gpu-sandbox --no-sandbox "$@" 2>&1
