app-id: com.fightcade.Fightcade
base: org.electronjs.Electron2.BaseApp
base-version: '22.08'
runtime: org.freedesktop.Platform
runtime-version: '22.08'
sdk: org.freedesktop.Sdk
command: fightcade
tags:
  - proprietary

# Support 32-bit at runtime
add-extensions:
  org.freedesktop.Platform.Compat.i386:
    directory: lib/i386-linux-gnu
    version: '22.08'

  org.freedesktop.Platform.GL32:
    directory: lib/i386-linux-gnu/GL
    version: '1.4'
    versions: 22.08;1.4
    subdirectories: true
    no-autodownload: true
    autodelete: false
    add-ld-path: lib
    merge-dirs: vulkan/icd.d;glvnd/egl_vendor.d;OpenCL/vendors;lib/dri;lib/d3d;vulkan/explicit_layer.d
    download-if: active-gl-driver
    enable-if: active-gl-driver

  # Add Fighcade-specific Wine extension to runtime.
  com.fightcade.Fightcade.Wine:
    directory: wine
    version: stable
    add-ld-path: lib32
    no-autodownload: false

# Support 32-bit at buildtime
sdk-extensions:
  - org.freedesktop.Sdk.Compat.i386
  - org.freedesktop.Sdk.Extension.toolchain-i386

finish-args:
  - --share=ipc
  - --socket=x11
  - --share=network
  - --socket=pulseaudio
  - --allow=multiarch
  # Allows emulators to inhibit screensavers
  - --talk-name=org.freedesktop.ScreenSaver
  # Allows Fightcade UI to send notifications for challenges
  - --talk-name=org.freedesktop.Notifications
  # Needed for controller support
  - --device=all
  # Add Wine extension point to $PATH
  - --env=PATH=/app/bin:/usr/bin:/app/wine/bin
  # Skip Gecko and Mono popups when creating Wine prefix
  - --env=WINEDLLOVERRIDES=mscoree,mshtml=
  # Support 32-bit runtime
  - --env=LD_LIBRARY_PATH=/app/lib:/app/lib32

modules:
  # Create 32-bit and wine directories
  - name: compat
    buildsystem: simple
    build-commands:
      - mkdir -p /app/lib/i386-linux-gnu
      - install -d /app/wine

  - name: fightcade
    buildsystem: simple
    build-commands:
      - mkdir -p /app/fightcade/Fightcade
      - mkdir -p /app/fightcade/Resources

      # A lot of things need to be symlinked to writable files. Fightcade
      # expects to be able to write to files in its subdirectories,
      # /app/fightcade/Fightcade is r/o in Flatpak.
      #
      # To work around this we symlink a bunch of files to writable
      # versions in /var/data/

      # JSON files
      - ln -s /var/data/fbneo_roms.json emulator/fbneo_roms.json
      - ln -s /var/data/snes9x_roms.json emulator/snes9x_roms.json
      - ln -s /var/data/flycast_roms.json emulator/flycast_roms.json
      - ln -s /var/data/nulldc_roms.json emulator/nulldc_roms.json
      - ln -s /var/data/fc1_roms.json emulator/fc1_roms.json
      - ln -s /var/data/fbneo_cv_roms.json emulator/fbneo_cv_roms.json
      - ln -s /var/data/fbneo_gg_roms.json emulator/fbneo_gg_roms.json
      - ln -s /var/data/fbneo_md_roms.json emulator/fbneo_md_roms.json
      - ln -s /var/data/fbneo_msx_roms.json emulator/fbneo_msx_roms.json
      - ln -s /var/data/fbneo_nes_roms.json emulator/fbneo_nes_roms.json
      - ln -s /var/data/fbneo_pce_roms.json emulator/fbneo_pce_roms.json
      - ln -s /var/data/fbneo_sg1k_roms.json emulator/fbneo_sg1k_roms.json
      - ln -s /var/data/fbneo_sms_roms.json emulator/fbneo_sms_roms.json
      - ln -s /var/data/fbneo_tg_roms.json emulator/fbneo_tg_roms.json
      # ROM storage directories
      - rmdir emulator/fbneo/ROMs
      - ln -s /var/data/ROMs/fbneo emulator/fbneo/ROMs
      - rmdir emulator/ggpofba/ROMs
      - ln -s /var/data/ROMs/ggpofba emulator/ggpofba/ROMs
      - rmdir emulator/snes9x/ROMs
      - ln -s /var/data/ROMs/snes9x emulator/snes9x/ROMs
      - rmdir emulator/flycast/ROMs
      - ln -s /var/data/ROMs/flycast emulator/flycast/ROMs
      # Log files Fightcade expects to be able to write to
      - ln -s /var/data/logs/fcade-errors.log emulator/fcade-errors.log
      - ln -s /var/data/logs/fcade.log emulator/fcade.log
      - ln -s /var/data/logs/fcade.log.1 emulator/fcade.log.1
      - ln -s /var/data/logs/fcade.log.2 emulator/fcade.log.3
      - ln -s /var/data/logs/fcade.log.3 emulator/fcade.log.2
      # FBNeo config
      - rm -rf emulator/fbneo/config
      - ln -s /var/data/config/fcadefbneo emulator/fbneo/config
      # FBNeo training mode
      - mv emulator/fbneo/fbneo-training-mode emulator/fbneo/fbneo-training-mode-original
      - ln -s /var/data/fbneo-training-mode emulator/fbneo/fbneo-training-mode
      # FBNeo save states
      - mv emulator/fbneo/savestates emulator/fbneo/savestates_orig
      - ln -s /var/data/config/fcadefbneo/savestates emulator/fbneo/savestates
      # FBNeo saved overlays
      - ln -s /var/data/config/fcadefbneo/fightcade emulator/fbneo/fightcade
      # Snes9x config
      - ln -s /var/data/config/snes9x/fcadesnes9x.conf emulator/snes9x/fcadesnes9x.conf
      - rm -r emulator/snes9x/Saves
      - ln -s /var/data/config/snes9x/Saves emulator/snes9x/Saves
      # Snes9x fixes
      - ln -s /var/data/config/snes9x/Valid.Ext emulator/snes9x/Valid.Ext
      - ln -s /var/data/config/snes9x/stdout.txt emulator/snes9x/stdout.txt
      - ln -s /var/data/config/snes9x/stderr.txt emulator/snes9x/stderr.txt
      # Flycast config
      - ln -s /var/data/config/flycast/emu.cfg emulator/flycast/emu.cfg
      - rm -rf emulator/flycast/mappings
      - ln -s /var/data/config/flycast/mappings emulator/flycast/mappings
      - ln -s /var/data/logs/flycast.log emulator/flycast/flycast.log
      # Backup the original data directory. We copy the savestates out of
      # the original directory at runtime.
      - mv emulator/flycast/data emulator/flycast/data_orig
      - ln -s /var/data/config/flycast/data emulator/flycast/data
      # Wine wrapper
      - install -Dm755 wine.sh /app/fightcade/Resources/wine.sh
      - cp -R * /app/fightcade/Fightcade
    sources:
      - type: archive
        url: https://web.fightcade.com/download/Fightcade-linux-v2.1.38.tar.gz
        sha256: 20d7fb4949d4622227b110ce0d02d52ccfd84983aa9c360d0d04c8e1abd65ea3
        x-checker-data:
          type: html
          url: https://web.fightcade.com/download/update.json
          version-pattern: Fightcade-linux-v([\d.]+).tar.gz
          url-template: https://web.fightcade.com/download/Fightcade-linux-v${version}.tar.gz
      - type: file
        path: scripts/wine.sh

  - name: fightcade-extra
    buildsystem: simple
    build-commands:
      - install -Dm755 com.fightcade.Fightcade.desktop /app/share/applications/com.fightcade.Fightcade.desktop
      - install -Dm755 fcade-quark.desktop /app/share/applications/com.fightcade.Fightcade.fcade-quark.desktop
      - install -Dm755 fightcade-launcher.sh /app/bin/fightcade
      - install -Dm755 fcade-quark.sh /app/bin/fcade-quark
      - install -Dm755 get-wine-prefix.sh /app/bin/get-wine-prefix
      - install -Dm755 com.fightcade.Fightcade-64.png /app/share/icons/hicolor/64x64/apps/com.fightcade.Fightcade.png
      - install -Dm755 com.fightcade.Fightcade-128.png /app/share/icons/hicolor/128x128/apps/com.fightcade.Fightcade.png
      - install -Dm755 com.fightcade.Fightcade-256.png /app/share/icons/hicolor/256x256/apps/com.fightcade.Fightcade.png
      - install -Dm644 metainfo.xml /app/share/metainfo/com.fightcade.Fightcade.metainfo.xml
    sources:
      - type: file
        path: com.fightcade.Fightcade.desktop
      - type: file
        path: fcade-quark.desktop
      - type: file
        path: icons/com.fightcade.Fightcade-64.png
      - type: file
        path: icons/com.fightcade.Fightcade-128.png
      - type: file
        path: icons/com.fightcade.Fightcade-256.png
      - type: file
        path: scripts/fightcade-launcher.sh
      - type: file
        path: scripts/fcade-quark.sh
      - type: file
        path: scripts/get-wine-prefix.sh
      - type: file
        path: metainfo.xml

  # Flycast native dep
  - shared-modules/lua5.3/lua-5.3.5.json

  # Flycast expects liblua to be named liblua5.3.so.0
  - name: lua
    buildsystem: simple
    build-commands:
      - ln -s /app/lib/liblua.so /app/lib/liblua5.3.so.0

  # Flycast native dep
  - name: libao
    buildsystem: autotools
    sources:
      - type: archive
        url: https://downloads.xiph.org/releases/ao/libao-1.2.0.tar.gz
        sha256: 03ad231ad1f9d64b52474392d63c31197b0bc7bd416e58b1c10a329a5ed89caf

  # Flycast native dep
  - name: libcurl-gnutls
    buildsystem: simple
    build-commands:
      - ARCH_TRIPLE=$(gcc --print-multiarch) && ln -s /usr/lib/${ARCH_TRIPLE}/libcurl.so.4
        /app/lib/libcurl-gnutls.so.4

  # Flycast native dep
  - name: libzip
    buildsystem: cmake-ninja
    config-opts:
      - -DCMAKE_BUILD_TYPE=Release
      - -DCMAKE_INSTALL_LIBDIR=lib
    cleanup:
      - /include
      - /bin
      - /share
      - /lib/pkgconfig
      - /lib/*.la
    sources:
      - type: archive
        url: https://libzip.org/download/libzip-1.9.2.tar.xz
        sha256: c93e9852b7b2dc931197831438fee5295976ee0ba24f8524a8907be5c2ba5937

  - name: libzip-symlink
    buildsystem: simple
    build-commands:
      - ln -s /app/lib/libzip.so.5 /app/lib/libzip.so.4

  # Flycast native dep
  - name: libminiupnpc
    buildsystem: cmake-ninja
    config-opts:
      - -DCMAKE_BUILD_TYPE=Release
      - -DUPNPC_BUILD_SHARED=true
      - -DUPNPC_BUILD_STATIC=false
      - -DUPNPC_BUILD_TESTS=false
      - -DUPNPC_BUILD_SAMPLE=false
      - -DUPNPC_NO_INSTALL=true
    # For some reason, CMake's install asks for files that do not exist.
    # So instead we'll install only the parts we care about ourselves.
    no-make-install: true
    post-install:
      - install -m0644 -t /app/lib libminiupnpc.so.2.2.3
      - install -m0644 -t /app/lib libminiupnpc.so.17
      - install -m0644 -t /app/lib libminiupnpc.so
    sources:
      - type: archive
        url: http://miniupnp.free.fr/files/miniupnpc-2.2.3.tar.gz
        sha256: dce41b4a4f08521c53a0ab163ad2007d18b5e1aa173ea5803bd47a1be3159c24

  # Wine dep. Should be moved to com.fightcade.Fightcade.Wine eventually.
  - name: faudio32
    buildsystem: cmake-ninja
    build-options:
      prepend-pkg-config-path: /app/lib32/pkgconfig:/usr/lib/i386-linux-gnu/pkgconfig
      prefix: /app
      ldflags: -L/app/lib32
      prepend-path: /usr/lib/sdk/toolchain-i386/bin
      env:
        CC: i686-unknown-linux-gnu-gcc
        CXX: i686-unknown-linux-gnu-g++
      libdir: /app/lib
      strip: true
      no-debuginfo: true
    config-opts:
      - -DGSTREAMER=ON
    sources:
      - type: archive
        url: https://github.com/FNA-XNA/FAudio/archive/20.12.tar.gz
        sha256: d5a1656ec79cd2878dddabc07d7f7848c11844595c76033aed929b10d922c009

  # Wine dep. Should be moved to com.fightcade.Fightcade.Wine eventually.
  - name: faudio64
    buildsystem: cmake-ninja
    build-options:
      prefix: /app
      libdir: /app/lib64
      strip: true
      no-debuginfo: true
    config-opts:
      - -DGSTREAMER=ON
    sources:
      - type: archive
        url: https://github.com/FNA-XNA/FAudio/archive/20.12.tar.gz
        sha256: d5a1656ec79cd2878dddabc07d7f7848c11844595c76033aed929b10d922c009
